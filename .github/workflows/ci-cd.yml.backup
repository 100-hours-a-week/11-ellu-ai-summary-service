name: Build and Push AI Summary Service to GAR

on:
  push:
    branches: 
      - stage
      - main
  pull_request:
    branches: 
      - stage
      - main

env:
  PROJECT_ID_DEV: ${{ secrets.PROJECT_ID_DEV }}
  GAR_LOCATION: asia-northeast3
  GAR_NAME: looper
  SERVICE: ai-summary

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Run tests
      run: |
        # Add your test commands here
        # pytest tests/ --cov=. --cov-report=xml
        echo "Tests would run here"

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      id-token: write

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Google Auth
      id: auth
      uses: google-github-actions/auth@v2
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Configure Docker to use gcloud as a credential helper
      run: |
        gcloud auth configure-docker $GAR_LOCATION-docker.pkg.dev

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID_DEV }}/${{ env.GAR_NAME }}/${{ env.SERVICE }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

    - name: Print image URL
      run: echo "Image pushed to ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID_DEV }}/${{ env.GAR_NAME }}/${{ env.SERVICE }}"

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/stage'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Google Auth
      id: auth
      uses: google-github-actions/auth@v2
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Deploy to GCP VM
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        LANGCHAIN_API_KEY: ${{ secrets.LANGCHAIN_API_KEY }}
        TAVILY_API_KEY: ${{ secrets.TAVILY_API_KEY }}
        HUGGINGFACE_API_KEY: ${{ secrets.HUGGINGFACE_API_KEY }}
        LANGSMITH_API_KEY: ${{ secrets.LANGSMITH_API_KEY }}
        AI_SECRET_KEY: ${{ secrets.AI_SECRET_KEY }}
      run: |
        # Get the latest image tag
        IMAGE_TAG="${GITHUB_SHA:0:7}"
        
        # Get app instance name from terraform
        APP_INSTANCE=$(gcloud compute instances list --filter="name~looper-dev-app" --format="value(name)" | head -1)
        
        # SSH into the VM and deploy
        gcloud compute ssh $APP_INSTANCE \
          --zone=asia-northeast3-a \
          --project=${{ env.PROJECT_ID_DEV }} \
          --tunnel-through-iap \
          --command="
            # Authenticate Docker with GAR
            gcloud auth configure-docker $GAR_LOCATION-docker.pkg.dev
            
            # Navigate to application directory
            cd /opt/looper
            
            # Update environment variables
            export IMAGE_TAG=stage-${IMAGE_TAG}
            export PROJECT_ID=${{ env.PROJECT_ID_DEV }}
            export GAR_LOCATION=$GAR_LOCATION
            export GAR_NAME=$GAR_NAME
            export OPENAI_API_KEY='$OPENAI_API_KEY'
            export LANGCHAIN_API_KEY='$LANGCHAIN_API_KEY'
            export TAVILY_API_KEY='$TAVILY_API_KEY'
            export HUGGINGFACE_API_KEY='$HUGGINGFACE_API_KEY'
            export LANGSMITH_API_KEY='$LANGSMITH_API_KEY'
            export AI_SECRET_KEY='$AI_SECRET_KEY'
            
            # Pull latest images
            docker-compose -f docker-compose.prod.yml pull looper-ai
            
            # Restart only ai service
            docker-compose -f docker-compose.prod.yml up -d looper-ai
            
            # Clean up old images
            docker image prune -f
          "

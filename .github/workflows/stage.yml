name: Docker Image For Stage
on: 
  push:
    branches:
      - stage

env:
  GAR_PROJECT_ID: ${{ secrets.GAR_PROJECT_ID }}
  PROJECT_ID: ${{ secrets.PROJECT_ID_DEV }}
  GAR_LOCATION: asia-northeast3
  GAR_REPOSITORY: looper
  ZONE: asia-northeast3-a
  SERVICE: ai-summary
  REGISTRY: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ secrets.GAR_PROJECT_ID }}/${{ env.GAR_REPOSITORY }}
  IMAGE_NAME: ai-summary
  VERSION: ${{ github.sha }}

jobs:
  test:
    name: Test
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov flake8

      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Run tests
        run: |
          # Add your test commands here
          # pytest tests/ --cov=. --cov-report=xml
          echo "Tests would run here"

  publish:
    name: Build and Push to GAR
    needs: test
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      id-token: write  
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Google Auth
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: Configure Docker for GCP
        run: gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: Print image URL
        run: echo "Image pushed to ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}"

  deploy:
    name: Deploy to DEV Environment
    needs: publish
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Google Auth
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: Deploy to GCP VM
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          LANGCHAIN_API_KEY: ${{ secrets.LANGCHAIN_API_KEY }}
          TAVILY_API_KEY: ${{ secrets.TAVILY_API_KEY }}
          HUGGINGFACE_API_KEY: ${{ secrets.HUGGINGFACE_API_KEY }}
          LANGSMITH_API_KEY: ${{ secrets.LANGSMITH_API_KEY }}
          AI_SECRET_KEY: ${{ secrets.AI_SECRET_KEY }}
        run: |
          echo "🚀 Starting deployment to DEV environment..."
          
          # Get app instance name from dev project
          APP_INSTANCE=$(gcloud compute instances list --project=${{ env.PROJECT_ID }} --filter="name~looper-dev-app" --format="value(name)" | head -1)
          
          if [ -z "$APP_INSTANCE" ]; then
            echo "❌ No application instance found!"
            exit 1
          fi
          
          echo "📍 Found instance: $APP_INSTANCE"
          
          # SSH into the VM and deploy with error handling
          gcloud compute ssh $APP_INSTANCE \
            --zone=${{ env.ZONE }} \
            --project=${{ env.PROJECT_ID }} \
            --tunnel-through-iap \
            --command="
              set -e
              echo '🔐 Authenticating Docker with GAR...'
              gcloud auth configure-docker $GAR_LOCATION-docker.pkg.dev
              
              echo '📂 Navigating to application directory...'
              cd /opt/looper
              
              echo '⚙️ Setting environment variables...'
              export IMAGE_TAG=${{ env.VERSION }}
              export PROJECT_ID=${{ env.GAR_PROJECT_ID }}
              export GAR_LOCATION=$GAR_LOCATION
              export GAR_NAME=$GAR_REPOSITORY
              export OPENAI_API_KEY='$OPENAI_API_KEY'
              export LANGCHAIN_API_KEY='$LANGCHAIN_API_KEY'
              export TAVILY_API_KEY='$TAVILY_API_KEY'
              export HUGGINGFACE_API_KEY='$HUGGINGFACE_API_KEY'
              export LANGSMITH_API_KEY='$LANGSMITH_API_KEY'
              export AI_SECRET_KEY='$AI_SECRET_KEY'
              
              echo '📥 Pulling latest AI service image...'
              docker-compose -f docker-compose.prod.yml pull looper-ai
              
              echo '🔄 Restarting AI service...'
              docker-compose -f docker-compose.prod.yml up -d looper-ai
              
              echo '⏳ Waiting for service to be ready...'
              sleep 30
              
              echo '🏥 Checking service health...'
              if curl -f http://localhost:8000/health > /dev/null 2>&1; then
                echo '✅ AI service is healthy!'
              else
                echo '⚠️ AI service health check failed, but deployment completed'
              fi
              
              echo '🧹 Cleaning up old images...'
              docker image prune -f
              
              echo '✨ Deployment completed successfully!'
            "
          
          echo "🎉 DEV deployment finished!"

      - name: Deployment Summary
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Status**: Completed" >> $GITHUB_STEP_SUMMARY
          echo "📦 **Image**: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "🎯 **Environment**: DEV" >> $GITHUB_STEP_SUMMARY
          echo "📅 **Deployed**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "- Monitor service logs" >> $GITHUB_STEP_SUMMARY
          echo "- Test AI endpoints" >> $GITHUB_STEP_SUMMARY
          echo "- Verify integration with backend" >> $GITHUB_STEP_SUMMARY
